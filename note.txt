DNS - DOMAIN NAME SYSTEM
ISP - INTERNET SERVICE PROVIDER
html (Hypertext Markup Language) - content and structure of the website
css - styling the website such as background color or button text
js - functionality of website. turns static website into something interactable

documentation - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img
newsletter - https://www.appbrewery.co/p/newsletter/
colorhunt - https://colorhunt.co/
css cheat sheet - https://htmlcheatsheet.com/css/

tag
<h1></h1> - headings from 1 to 6
<p></p> - paragraph
<hr /> - void element, a honrizontal rule/divider element
<br /> - break line
<a href="link"></a> - hyperlink

unordered list (ul)
<ul>
 <li>list1</li>
 <li>list2</li>
</ul>

ordered list (ol)
<ol>
 <li></li>
 <li></li>
</ol>

attributes
<tag attribute=value anotherattribute=value>Content</tag>
<li><a href="https://www.google.com/">Google</a></li>

image
<img src="./source" />

HTML boilerplate

<!DOCTYPE html>		// html version
<html lang="en">	// language
    <head>		//where you put important information about the website that the user does not need to see
        <meta charset="UTF-8">	// charset to use
        <title>My Website</title>	//title of tab
    </head>
</html>

lorem ipsum - a tradition to use to fill in paragraph of text with place holder text

Inline CSS - used to adding styles to just a single element (not recommended)
<html style="property: value"></html>

Internal CSS - used for single page website
<html>
	<head>
		<style>
			html{
				property: value;
			}
		</style>
	</head>
</html>

External CSS - coded in CSS file, recommended and used for multi-page website
<html>
	<head>
		<link rel="stylesheet" href="./styles.css" />
	</head>
</html>

Selector
<h1 class="classname" id="idname"></h1>
.classname{} //class selector
#idname{} //id selector
*{} //select all
h1[attribute="value"]{} //attribute selector

Html properties
background-color
color

color hunt

Units:
px, pt, em(parent), rem(root, recommended)

font-weight: normal, bold, normal bold, lighter, bolder, number

font-family: Helvetica, sans-serif, etc

text-align: center, right, left, start, end, etc

Box model
content -> padding -> border -> margin

border: tickness style(solid/dashed) color(black,etc) 
border-top: thickness
border-width: 4args or 2 args
padding: 20px //pushes out the border from box by x px
margin: outside the border

Cascading priority:

1) element
2) class
3) attribute
4) id

Type:
1) External
2) Internal
3) Inline

!important - special keyword that gives priority

combined css selector:
Group - apply to both selector
selector, selector {code}

descendant - access element inside a branch
.div p{code}

child:
selector > selector {code}

chaining - to get really specfic element
selectorselector {code}

CSS positioning
Fixed - will always stay on screen
Absolute - absolute to a ancestor
relative - relative to its default position
static - default position.

CSS Display
Inline - side by side
Block - one block by block
Inline-Block - allows inline to have block properties such as height and width

CSS Float
float: left; // allows wrapping of text by making the element float
clear: left; // clears any responsibility to wrap around any floaters

Responsiveness
Media Query - @media (max-width: 600px){css code for width >= 600px}
CSS Grid - premade grid box, display: grid;
CSS Flexbox - useful for 1D layouts, display: flex;
Bo9otstrap Framework - can be imported templates made by others

Flex box
make a <div class="container'> to enclose all the element we want
.container {
	display: flex; // can be inline-flex this make the width of flexbox match the biggest element
	gap: 10px;
	flex-direction: row; // or column
	flex-basis: 100px; // set element's length depending on flex-direciton (put in children), the initial starting value of shrinking and growing
	order: 0; // determines the order the element is in the flexbox (put in children)
	flex-wrap: nowrap; // or wrap to wrap the element to next line if space runs out
	justify-content: center; // main-axis distribution
	align-items: flex-start; // cross-axis distribution, when flex-wrap is nowrap
	align-content: center; // when flex-wrap is wrap
}
sizing - min/max width > flex-basis > width > content width
flex-grow: 0; // limits the ability to grow
flex-shrink: 0; // limits the ability to shrink
flex: grow shrink basis; or flex: 1/2/3/4...;

Grid
make a <div class="container'> to enclose all the element we want
.container {
	display: grid;
	grid-template-columns: 1fr 2fr;
	grid-template-rows: 1fr 1fr; // can combine with grid-template: 10px 20px / 20px 10px;
	grid-auto-rows: 200px; // defines the row size for excess elements
	gap: 10px;
}

.item {
	grid-column: span 2; // no of col this item takes, short hand for the below 2 line
	grid-column-start: 2; // which line it starts
	grid-column-end: 4; // or use -1,-2, etc
	order: 1; // to determine the arrangement of items
	grid-area: 2/1/3/2; short hand for grid-row-start/end and grid-column-start/end
}

Grid-sizing
Fixed - grid-template-rows: 1px 2rem; not responsive
Auto - grid-template-columns: 100px auto; each row will try to fit to the horizontal available space
Fractional - grid-template-rows: 1fr 1fr; elements will always try to fit to ratio provided
MinMax - grid-template-rows: 1px minmax(400px, 800px); set max and min
Repeat - grid-template-rows: repeat(2, 200px); repeat 2 times with 200px size

Bootstrap - for fast deployment of mobile first sites
Layout
12 column system - div container > div row > items
<div class="container">
	<div class="row">
		<div class="col">Hello</div>
	</div>
</div>
col-2 means the div occupies 2 col, col-4 occupies 4, etc
breakpoints - sm md lg xl xxl
define multiple breakpoint -> col-sm-12 col-md-8 col-lg-4

w3school - bootstrap template

Web design
https://color.adobe.com/create/color-wheel - adobe color wheel
https://colorhunt.co/ - color hunt
Analogous Colours - color next to each other on the color wheel - works well together
Complementary Colours - opposite on the color wheel - makes the item pops out more (do not do for text, do for logo)

Typography
Serif - Old/Transitional/Modern (traditional, stable, respectable)
Font: Didot

San-Serifs Sensible, simple, straightforward
Font: Humanist, Grotesque (humanist is highly readable)

Advise: use atmost 2 fonts, go for similar moods and time era, contrast serif-ness and weights
do not use comic sans!

UI Design
Rules of heiriarchy 
- color: brighter color have higher hieriarchy
- size: larger more attention grabbing
- layout
- alignment: left align elements that are related, reduce the number of alignment points
- line length: 40-60 characters a line
- white space: declutter by using whitespace
- audience: use elements that resonates with the target audience, e.g. children vs adult

UX Design
- simplicity: dont load a webpage with too much content and functionality
- consistency: dont change up designs too much on different platforms
- reading patterns: F-pattern, start the top left then down. so try to use a F-layout
Z-pattern is another common pattern
- all platform design: mobile responsive, accomodate both mobile and wide screen, dont put too much banners

Daily UI - for practising ui skills

Javascript
documentation - https://developer.mozilla.org/en-US/docs/Web/JavaScript

Datatypes - string, number, boolean
js input - prompt("question");
js output - alert() or console.log()
Variables - var someVar = 12;

naming convention - meaningful name, cannot be only keyword, cannot start with number, cannot connect with -, use camel casing

string concatenation - using +, "Hello" + "World!"

string len - get the length of string by using var.length;

string slicing - var.slice(0,1) , from index 0 to 1, not including 1

toUpperCase() - change all to uppercase
toLowerCase() - change all to lowercase
Math.random() - random no. from 0-0.9999

Arithmetic and modulo -> +,-,/,%
increment and decrement -> ++, --, +=, -=, *=, /=,  

Function - function someFunction(parameter) {code}
Function output - return;
js equality - ===, !==, >=, <=, <, >
== vs === -> === check for data types while == just checks for value

array -> var guest = [];
var array = new Array();
array.push();
array.includes();
array.pop();

inline js - onload=""
internal js - <script type="text/javascript"></script>
external js -<script src="index.js"></script>

Document Object Moddel
document.firstElementChild.lastElementChild
object.style.color = "red";
document.querySelector("input").click(); //querySelector selects with css selector. click() simulates a mouse click
document.getElementsByTagName("selector")[index]; // indexed like an array
document.getElementById("id selector"); // returns the object with the target id
document.querySelectorAll("HTMLselector"); // returns an array all match. while querySelector only returns the first match

HTML DOM style
document.object.classList; // returns all class tag that this object possess
document.object.classList.toggle("some class tag"); // toggle btw add/remove of a class tag.
document.object.innerHTML; // returns everything inside the tag
document.object.textContent; // returns only the string content inside the tag
document.object.attributes; // returns all attibutes of a element as an array
document.object.getAttribute("attribute name"); // returns the attribute
document.object.setAttribute("attribute name") = "some value" // set the attribute content
Event listener
object.addEventListerner(type, function);
higher order function - 
function calculator(num1, num2, operator){
	return operator(num1, num2);
} // operator is a function

sound - var audio = new Audio("filename.mp3"); audio.play();

js objects
var object = {
	name: "someName",
	age: "someAge",
	property: "someProperty"
}

constructor
function Object (name, age, property) {
	this.name = name;
	this.age = age;
	this.property = property;
	this.someFunction: function() {
		//some code
		return something;
	}
}

callback function
timeout function