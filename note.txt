DNS - DOMAIN NAME SYSTEM
ISP - INTERNET SERVICE PROVIDER
html (Hypertext Markup Language) - content and structure of the website
css - styling the website such as background color or button text
js - functionality of website. turns static website into something interactable

documentation - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img
newsletter - https://www.appbrewery.co/p/newsletter/
colorhunt - https://colorhunt.co/
css cheat sheet - https://htmlcheatsheet.com/css/
app brewery course material - https://appbrewery.com/p/web-development-course-resources

tag
<h1></h1> - headings from 1 to 6
<p></p> - paragraph
<hr /> - void element, a honrizontal rule/divider element
<br /> - break line
<a href="link"></a> - hyperlink

unordered list (ul)
<ul>
 <li>list1</li>
 <li>list2</li>
</ul>

ordered list (ol)
<ol>
 <li></li>
 <li></li>
</ol>

attributes
<tag attribute=value anotherattribute=value>Content</tag>
<li><a href="https://www.google.com/">Google</a></li>

image
<img src="./source" />

HTML boilerplate

<!DOCTYPE html>		// html version
<html lang="en">	// language
    <head>		//where you put important information about the website that the user does not need to see
        <meta charset="UTF-8">	// charset to use
        <title>My Website</title>	//title of tab
    </head>
</html>

lorem ipsum - a tradition to use to fill in paragraph of text with place holder text

Inline CSS - used to adding styles to just a single element (not recommended)
<html style="property: value"></html>

Internal CSS - used for single page website
<html>
	<head>
		<style>
			html{
				property: value;
			}
		</style>
	</head>
</html>

External CSS - coded in CSS file, recommended and used for multi-page website
<html>
	<head>
		<link rel="stylesheet" href="./styles.css" />
	</head>
</html>

Selector
<h1 class="classname" id="idname"></h1>
.classname{} //class selector
#idname{} //id selector
*{} //select all
h1[attribute="value"]{} //attribute selector

Html properties
background-color
color

color hunt

Units:
px, pt, em(parent), rem(root, recommended)

font-weight: normal, bold, normal bold, lighter, bolder, number

font-family: Helvetica, sans-serif, etc

text-align: center, right, left, start, end, etc

Box model
content -> padding -> border -> margin

border: tickness style(solid/dashed) color(black,etc) 
border-top: thickness
border-width: 4args or 2 args
padding: 20px //pushes out the border from box by x px
margin: outside the border

Cascading priority:

1) element
2) class
3) attribute
4) id

Type:
1) External
2) Internal
3) Inline

!important - special keyword that gives priority

combined css selector:
Group - apply to both selector
selector, selector {code}

descendant - access element inside a branch
.div p{code}

child:
selector > selector {code}

chaining - to get really specfic element
selectorselector {code}

CSS positioning
Fixed - will always stay on screen
Absolute - absolute to a ancestor
relative - relative to its default position
static - default position.

CSS Display
Inline - side by side
Block - one block by block
Inline-Block - allows inline to have block properties such as height and width

CSS Float
float: left; // allows wrapping of text by making the element float
clear: left; // clears any responsibility to wrap around any floaters

Responsiveness
Media Query - @media (max-width: 600px){css code for width >= 600px}
CSS Grid - premade grid box, display: grid;
CSS Flexbox - useful for 1D layouts, display: flex;
Bo9otstrap Framework - can be imported templates made by others

Flex box
make a <div class="container'> to enclose all the element we want
.container {
	display: flex; // can be inline-flex this make the width of flexbox match the biggest element
	gap: 10px;
	flex-direction: row; // or column
	flex-basis: 100px; // set element's length depending on flex-direciton (put in children), the initial starting value of shrinking and growing
	order: 0; // determines the order the element is in the flexbox (put in children)
	flex-wrap: nowrap; // or wrap to wrap the element to next line if space runs out
	justify-content: center; // main-axis distribution
	align-items: flex-start; // cross-axis distribution, when flex-wrap is nowrap
	align-content: center; // when flex-wrap is wrap
}
sizing - min/max width > flex-basis > width > content width
flex-grow: 0; // limits the ability to grow
flex-shrink: 0; // limits the ability to shrink
flex: grow shrink basis; or flex: 1/2/3/4...;

Grid
make a <div class="container'> to enclose all the element we want
.container {
	display: grid;
	grid-template-columns: 1fr 2fr;
	grid-template-rows: 1fr 1fr; // can combine with grid-template: 10px 20px / 20px 10px;
	grid-auto-rows: 200px; // defines the row size for excess elements
	gap: 10px;
}

.item {
	grid-column: span 2; // no of col this item takes, short hand for the below 2 line
	grid-column-start: 2; // which line it starts
	grid-column-end: 4; // or use -1,-2, etc
	order: 1; // to determine the arrangement of items
	grid-area: 2/1/3/2; short hand for grid-row-start/end and grid-column-start/end
}

Grid-sizing
Fixed - grid-template-rows: 1px 2rem; not responsive
Auto - grid-template-columns: 100px auto; each row will try to fit to the horizontal available space
Fractional - grid-template-rows: 1fr 1fr; elements will always try to fit to ratio provided
MinMax - grid-template-rows: 1px minmax(400px, 800px); set max and min
Repeat - grid-template-rows: repeat(2, 200px); repeat 2 times with 200px size

Bootstrap - for fast deployment of mobile first sites
Layout
12 column system - div container > div row > items
<div class="container">
	<div class="row">
		<div class="col">Hello</div>
	</div>
</div>
col-2 means the div occupies 2 col, col-4 occupies 4, etc
breakpoints - sm md lg xl xxl
define multiple breakpoint -> col-sm-12 col-md-8 col-lg-4

w3school - bootstrap template

Web design
https://color.adobe.com/create/color-wheel - adobe color wheel
https://colorhunt.co/ - color hunt
Analogous Colours - color next to each other on the color wheel - works well together
Complementary Colours - opposite on the color wheel - makes the item pops out more (do not do for text, do for logo)

Typography
Serif - Old/Transitional/Modern (traditional, stable, respectable)
Font: Didot

San-Serifs Sensible, simple, straightforward
Font: Humanist, Grotesque (humanist is highly readable)

Advise: use atmost 2 fonts, go for similar moods and time era, contrast serif-ness and weights
do not use comic sans!

UI Design
Rules of heiriarchy 
- color: brighter color have higher hieriarchy
- size: larger more attention grabbing
- layout
- alignment: left align elements that are related, reduce the number of alignment points
- line length: 40-60 characters a line
- white space: declutter by using whitespace
- audience: use elements that resonates with the target audience, e.g. children vs adult

UX Design
- simplicity: dont load a webpage with too much content and functionality
- consistency: dont change up designs too much on different platforms
- reading patterns: F-pattern, start the top left then down. so try to use a F-layout
Z-pattern is another common pattern
- all platform design: mobile responsive, accomodate both mobile and wide screen, dont put too much banners

Daily UI - for practising ui skills

Javascript
documentation - https://developer.mozilla.org/en-US/docs/Web/JavaScript

Datatypes - string, number, boolean
js input - prompt("question");
js output - alert() or console.log()
Variables - var someVar = 12;

naming convention - meaningful name, cannot be only keyword, cannot start with number, cannot connect with -, use camel casing

string concatenation - using +, "Hello" + "World!"

string len - get the length of string by using var.length;

string slicing - var.slice(0,1) , from index 0 to 1, not including 1

toUpperCase() - change all to uppercase
toLowerCase() - change all to lowercase
Math.random() - random no. from 0-0.9999

Arithmetic and modulo -> +,-,/,%
increment and decrement -> ++, --, +=, -=, *=, /=,  

Function - function someFunction(parameter) {code}
Function output - return;
js equality - ===, !==, >=, <=, <, >
== vs === -> === check for data types while == just checks for value

array -> var guest = [];
var array = new Array();
array.push();
array.includes();
array.pop();

inline js - onload=""
internal js - <script type="text/javascript"></script>
external js -<script src="index.js"></script>

Document Object Moddel
document.firstElementChild.lastElementChild
object.style.color = "red";
document.querySelector("input").click(); //querySelector selects with css selector. click() simulates a mouse click
document.getElementsByTagName("selector")[index]; // indexed like an array
document.getElementById("id selector"); // returns the object with the target id
document.querySelectorAll("HTMLselector"); // returns an array all match. while querySelector only returns the first match

HTML DOM style
document.object.classList; // returns all class tag that this object possess
document.object.classList.toggle("some class tag"); // toggle btw add/remove of a class tag.
document.object.innerHTML; // returns everything inside the tag
document.object.textContent; // returns only the string content inside the tag
document.object.attributes; // returns all attibutes of a element as an array
document.object.getAttribute("attribute name"); // returns the attribute
document.object.setAttribute("attribute name") = "some value" // set the attribute content
Event listener
object.addEventListerner(type, function);
higher order function - 
function calculator(num1, num2, operator){
	return operator(num1, num2);
} // operator is a function

sound - var audio = new Audio("filename.mp3"); audio.play();

js objects
var object = {
	name: "someName",
	age: "someAge",
	property: "someProperty"
}

constructor
function Object (name, age, property) {
	this.name = name;
	this.age = age;
	this.property = property;
	this.someFunction: function() {
		//some code
		return something;
	}
}

callback function
timeout function

JQuery - a js library
to use, get cdn from the jquery website
$("h1").css("color", "red");
$ - short hand to get object from selector
$(document).ready(function() {code}) // a round about way to safe guard against ready code before jquery is ready

selecting element - $("css selector") 
e.g. $("button") selects all button element

Jquery styles - object.css("property name", "new value") sets the value or object.css("property name") get the value
$().addClass("classTag") // same as classList.add(); allows adding multiple classes
$().removeClass("classTag") // same as add
$().hasClass("classTag") // returns boolean if has class
$().text("newText") // change text
$().html("new HTML") // change inner HTML
$().attr("attr name", "new value") // sets value is 2 argument provided, or get if 1 argument provided
$().click(function(){code}); // add a event listener "click" , can be other events. selects all elements with the css selector
$().keydown(function(e){code}); // same as above
$().on("event", function(){code}); // more flexible way to add event listener
$("h1").before("<h1>new h1</h1>"); // add a new element before selected element
$().after(); // same as above but after
$().prepend(); // add to before selected element's content
$().append(); // same as above but after
$().remove(); // remove selected elements
$().hide() or .show() or .toggle(); // does what it says to the elements
$().fadeIn() or .fadeOut() or fadeToggle();
$().slideUp() or .slideIn() or slideToggle();
$().animate({opacity: 0.5}); // only numerical properties 


Minification -minifier.org removes all xtra comments or space to save space

CLI
touch filename.ext // makes a file
start filename.ext // open a file
rm filename.ext // delete a file
rm -r directoryname/ // delete a directory
https://www.learnenough.com/command-line-tutorial // learn more cli

backend
consists of the server, application, and database
server -> a computer that is on 24/7
application -> logic of how we respond to requests from user to the server
database -> store user data

Node.js
Node (REPL) Read Eval Print Loop - an environment where user input is read by computer and a respond is returned
Native Modules 
File system - to edit local files

NPM - node package manager
npm init
inquirer, qr-code, sillynames, heronames

Expressjs - specialised node for server backend
app.listen(port, function(request, response){}); // get request 
app.get("/", callback); // start server
app.post("/", function(req, res) { } // to respond
nodemon - a api to install, helps restart server automatically everytime there is a change
res.sendFile(__dirname); - gives the filepath of current file no matter where it is
<form action="/" method="post"> - when using backend, action sending to the route you want

	import { fileURLToPath } from 'url';
	import { dirname } from 'path';

	const __filename = fileURLToPath(import.meta.url);
	const __dirname = dirname(__filename);

// write this if want to use __dirname

npm i body-parser
app.use(bodyParser.urlencoded({extended: true})); // allow req.body to get info from routes

////// template //////
import express from 'express';
import bodyParser from 'body-parser';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
app.use(bodyParser.urlencoded({
    extended: true
}));
///////////////////////

API - application programming interface
API Endpoint - a url for api
Postman - for api testing
JSON - javascript object notation

parsing JSON in api
native - using https
https.get(url, function(res){
	response.on("data", function(data) {
		const data = JSON.parse(data);
	})
})

res.write() // can do this many times
res.send() // only do this once

Mailchimp API - for email collection

website set up checklist
create project directory
make app.js and index.html
npm init
npm i express body-parser
change typer to modules
import
app = express();
app.use(bodyParser.urlencoded({extended: true}))
app.listen at defined port

https.request() // to post data to server

heroku - server running company
app.listen(process.env.PORT, function() {}); // have to do this for dynamic port for heroku

git/github
git init // to initialist repository
git add . // stage everything
git commit -m "message"// commit change

version control
git status // show current staging, commits
git log // show commit histories
git diff <filename> // check diff of file with previous commit
git checkout // rollback to previous commits

github remote
first create a repository on github
git remote add origin <repo url> // create remote repository
git push -u origin main // push local repository to remote repository
git rm --cached -r . // remove all from staging area

git ignore
touch .gitignore // create a git ignore file
open .gitignore // open the file
////inside .gitignore////
.DS_Store
*.txt // * is wild card, anything with .txt will be ignored
# pound sign is comment
//////////////////////////

git clone <url> // clone remote repo to local storage
git branch <branch-name> // make branch
git checkout <branch-name> // switch to a existing branch
git merge <branch-name> // merge branch
git rebase <branch-name> // rebase a branch to another branch
git branch -f main <commit-hash> // move main to certain commit
git reset <commit> // reverse change by moving HEAD back by 1
git revert <commit> // commits a new change that is identical as the previous commit
git cherry-pick <commit> [commit,..] // commits selected commit on working branch

HTML templating
EJS - Embedded JavaScript templating
have to create a folder called 'views'
app.set('view engine', 'ejs'); // nid to set this
res.render('page', {var: 'var'}) // to render a page
date.tolocaledatestring() // native method to format date
-webkit-linear-gradient() // for gradient background
<% %> // snippets
<%= %> // dynamic output
<%- -%. // layouts

modularisation // using node
create new .js file
functionise it
export default <functionName> 
const func = {
	func1() {},
	func2() {}
}
then import

npm install // install dependencies

route parameter // allows template routing
app.get('/home/:param', function(req,res) {
	res.send(req.params);
}
use req.params to get the param

DATABASE
SQL - MySQL, PostgreSQL
sql db will group data into tables, less scalable, more relational
NoSQL - mongoDB, redis
no-sql data are represented as JSON objects, more scalable, less relational

SQLite
CREATE TABLE tableName ( // to create a table
	id INT NOT NULL,
	name STRING,
	price MONEY,
	PRIMARY KEY (id)
)

INSERT INTO // to insert data
SELECT // read data
WHERE // condition for which row to read
UPDATE <table> SET <col> WHERE <row condition> // update a value
ALTER TABLE <table> ADD <col name, datatype> // add a col
DELETE FROM <table> WHERE <condition> // delete a value
INNER JOIN // search and join 2 table

MONGODB
use shopDB // create a db
db.<collectionName>.insertOne({object}) // insert entries into db
db.collection.find() // to query the db
db.products.updateOne({_id: 1}, {$set: {stock: 32}}) // edit value
db.products.deleteOne({_id: 2}) // delete entry

mongoDB native driver
npm i mongodb

mongoose
import mongoose from 'mongoose';
mongoose.connect('mongodb://127.0.0.1:27017/fruitsDB');
const FruitSchema = mongoose.Schema({ 
    name: String,
    rating: Number,
    review: String 
});

const Fruit = mongoose.model('Fruit', FruitSchema);

const fruit = new Fruit({
    name: 'Apple',
    rating: 7,
    review: 'Good'
});

fruit.save() // insert 1 entry
Fruit.insertMany([ob1, ob2, ob3], function(err) {if(err){console.log(err)} else {console.log('success')}) // insert many entry
Fruit.find().then(fruits => {console.log(fruits)}); // to query the db
mongoose.connection.close(); // close the db
Fruit.updateOne() // update entry
Fruit.deleteOne() // delete entry

data validation
const FruitSchema = mongoose.Schema({ 
    name: String,
    rating: {
        type: Number,
        min: 1,
        max: 10
    },
    review: String 
});

Representational State Transfer (REST) API - a architechtural style
GET (READ) - same as read
POST - same as CREATE, create a entry containing some data from server
PUT - update some information by sending a whole new entry to replace the old one
PATCH - only send the piece of data that nids to be changed instead of a entire entry
DELETE - remove some entry

route pattern - search up RESTful routing
Robo 3T - mongodb gui

mongoose encryption
npm i mongoose-encryption

hashing
npm i md5

cookie and session
npm i passport passport-local passport-local-mongoose express-session

OAuth - open authorization

ES6+ modules
export default <functionName>;
or
export {func1, func2, func3};
import func from "./path";
or
import {func1, func2, func3} from "./path";

Reactjs - front end framework
<div id="root"><div/>
inline js -> style={{color:"red"}} // have to be a js object instead of a string
react props
function Note(props) {
	return <h1>props.prop1</h1>;
}
<Note prop1="test" /> 

array.map(<somefucntion>); // create a new array by doing something with each item in an array
array.filter(<somefunction>); // create a new array by keeping items that return true only
array.reduce(<somefunction>); // accumulate a value by doing something to each item in an array
array.find(<somefunction>); // returns the item that first matches the condition
array.findIndex(<somefunction>); // return the index of item that first match the condition

&& operator -> (in React) since right hand side is only evaluated if left side is true, && can be used for shorthanded ternery operation if only 1 element is to be shown based on certain condition

State in React - declarative vs imperative programming
changing state of variable by some user action
const state = useState(123) // param is initial state, returns a array of [state, function]
destructuring - const [red, green, blue] = [0, 0, 0] // allow mapping of var to array

event handler
fucntion eventHandler(event) {
	console.log(event.target.value); // get certain property of element with event.target
	console.log(event.target.type);
}
prevent default of form in react
<form
        onSubmit={(event) => {
          setTitleName(name);
          event.preventDefault();
        }}
      >

react class
class App extends React.Component {
	render();
} // to create react class

onChange={(event) => {
            const { value } = event.target;
            setname((pre) => {
              return {
                fname: value,
                lname: pre.lname
              };
            });
          }}    			// make sure event is not inside a useState function

react spread operator
const array1 = ["1", "2", "3"];
const array2 = ["4", "5", "6", ...array1]; // this combines array1 and array2, works for object too

npm install @material-ui/icons

"homepage": "https://oscarqjh.github.io/2023WebDevBootcamp-KeeperApp",
"predeploy": "npm run build",
    "deploy": "gh-pages -d build",